//Eli Moore
//Lab 6
// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
//  -> BUFFER C TAB

//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // setup
    // test UV for input image
    sCoord uv = fragCoord / iChannelResolution[0].xy;

    color4 finalColor;
    //Add up the pixels and multiply by the 5x5 matrix
    finalColor +=       texture(iChannel0, uv + vec2(-2.0,-2.0)/iChannelResolution[0].xy);
    finalColor += 4.0 * texture(iChannel0, uv + vec2(-1.0,-2.0)/iChannelResolution[0].xy);
    finalColor += 6.0 * texture(iChannel0, uv + vec2(0.0,-2.0)/iChannelResolution[0].xy);
    finalColor += 4.0 * texture(iChannel0, uv + vec2(1.0,-2.0)/iChannelResolution[0].xy);
    finalColor +=       texture(iChannel0, uv + vec2(2.0,-2.0)/iChannelResolution[0].xy);
    
    finalColor += 4.0 *  texture(iChannel0, uv + vec2(-2.0,-1.0)/iChannelResolution[0].xy);
    finalColor += 16.0 * texture(iChannel0, uv + vec2(-1.0,-1.0)/iChannelResolution[0].xy);
    finalColor += 24.0 * texture(iChannel0, uv + vec2(0.0,-1.0)/iChannelResolution[0].xy);
    finalColor += 16.0 * texture(iChannel0, uv + vec2(1.0,-1.0)/iChannelResolution[0].xy);
    finalColor += 4.0 *  texture(iChannel0, uv + vec2(2.0,-1.0)/iChannelResolution[0].xy);
    
    finalColor += 6.0 *  texture(iChannel0, uv + vec2(-2.0,0.0)/iChannelResolution[0].xy);
    finalColor += 24.0 * texture(iChannel0, uv + vec2(-1.0,0.0)/iChannelResolution[0].xy);
    finalColor += 36.0 * texture(iChannel0, uv + vec2(0.0,0.0)/iChannelResolution[0].xy);
    finalColor += 24.0 * texture(iChannel0, uv + vec2(1.0,0.0)/iChannelResolution[0].xy);
    finalColor += 6.0 *  texture(iChannel0, uv + vec2(2.0,0.0)/iChannelResolution[0].xy);
    
    finalColor += 4.0 *  texture(iChannel0, uv + vec2(-2.0,1.0)/iChannelResolution[0].xy);
    finalColor += 16.0 * texture(iChannel0, uv + vec2(-1.0,1.0)/iChannelResolution[0].xy);
    finalColor += 24.0 * texture(iChannel0, uv + vec2(0.0,1.0)/iChannelResolution[0].xy);
    finalColor += 16.0 * texture(iChannel0, uv + vec2(1.0,1.0)/iChannelResolution[0].xy);
    finalColor += 4.0 *  texture(iChannel0, uv + vec2(2.0,1.0)/iChannelResolution[0].xy);
    
    finalColor +=       texture(iChannel0, uv + vec2(-2.0,2.0)/iChannelResolution[0].xy);
    finalColor += 4.0 * texture(iChannel0, uv + vec2(-1.0,2.0)/iChannelResolution[0].xy);
    finalColor += 6.0 * texture(iChannel0, uv + vec2(0.0,2.0)/iChannelResolution[0].xy);
    finalColor += 4.0 * texture(iChannel0, uv + vec2(1.0,2.0)/iChannelResolution[0].xy);
    finalColor +=       texture(iChannel0, uv + vec2(2.0,2.0)/iChannelResolution[0].xy);
    
	//Divide by 256
    finalColor *= 0.00390625;//Reciprical of 256

    // set iChannel0 to 'Misc/Buffer B' and fetch sample
    fragColor = finalColor;
}